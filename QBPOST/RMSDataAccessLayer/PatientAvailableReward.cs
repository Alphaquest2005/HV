//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RMSDataAccessLayer
{
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel;
    using TrackableEntities;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Runtime.Serialization;
    using System.Collections.ObjectModel;

    using System;
    using System.Collections.Generic;
    using TrackableEntities.Client;
    
    public partial class PatientAvailableReward : BaseEntity<PatientAvailableReward>
    {
        [DataMember]
                    [Required(ErrorMessage="Id is required")]
    	public int Id
    	{ 
    		get { return _Id; }
    		set
    		{
    			if (Equals(value, _Id)) return;
    			_Id = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private int _Id;
        [DataMember]
                    [Required(ErrorMessage="PatientId is required")]
    	public int PatientId
    	{ 
    		get { return _PatientId; }
    		set
    		{
    			if (Equals(value, _PatientId)) return;
    			_PatientId = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private int _PatientId;
        [DataMember]
                    [Required(ErrorMessage="Name is required")]
                [StringLength(50)]
    	public string Name
    	{ 
    		get { return _Name; }
    		set
    		{
    			if (Equals(value, _Name)) return;
    			_Name = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Name;
        [DataMember]
                    [Required(ErrorMessage="Points is required")]
    	public double Points
    	{ 
    		get { return _Points; }
    		set
    		{
    			if (Equals(value, _Points)) return;
    			_Points = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private double _Points;
        [DataMember]
                    [Required(ErrorMessage="RewardPoints is required")]
    	public int RewardPoints
    	{ 
    		get { return _RewardPoints; }
    		set
    		{
    			if (Equals(value, _RewardPoints)) return;
    			_RewardPoints = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private int _RewardPoints;
        [DataMember]
                    [Required(ErrorMessage="Description is required")]
                [StringLength(255)]
    	public string Description
    	{ 
    		get { return _Description; }
    		set
    		{
    			if (Equals(value, _Description)) return;
    			_Description = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Description;
        [DataMember]
                    [Required(ErrorMessage="Membership is required")]
                [StringLength(50)]
    	public string Membership
    	{ 
    		get { return _Membership; }
    		set
    		{
    			if (Equals(value, _Membership)) return;
    			_Membership = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Membership;
        [DataMember]
                    [Required(ErrorMessage="PointRatePerDollar is required")]
    	public double PointRatePerDollar
    	{ 
    		get { return _PointRatePerDollar; }
    		set
    		{
    			if (Equals(value, _PointRatePerDollar)) return;
    			_PointRatePerDollar = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private double _PointRatePerDollar;
        [DataMember]
                    [Required(ErrorMessage="Value is required")]
    	public double Value
    	{ 
    		get { return _Value; }
    		set
    		{
    			if (Equals(value, _Value)) return;
    			_Value = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private double _Value;
        [DataMember]
                    [Required(ErrorMessage="MembershipId is required")]
    	public int MembershipId
    	{ 
    		get { return _MembershipId; }
    		set
    		{
    			if (Equals(value, _MembershipId)) return;
    			_MembershipId = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private int _MembershipId;
        [DataMember]
                    [StringLength(50)]
    	public string Status
    	{ 
    		get { return _Status; }
    		set
    		{
    			if (Equals(value, _Status)) return;
    			_Status = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Status;
        [DataMember]
        	public Nullable<System.DateTime> StatusDate
    	{ 
    		get { return _StatusDate; }
    		set
    		{
    			if (Equals(value, _StatusDate)) return;
    			_StatusDate = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<System.DateTime> _StatusDate;
        [DataMember]
                    [Required(ErrorMessage="RewardId is required")]
    	public int RewardId
    	{ 
    		get { return _RewardId; }
    		set
    		{
    			if (Equals(value, _RewardId)) return;
    			_RewardId = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private int _RewardId;
        [DataMember]
        	public Nullable<int> PatientRewardId
    	{ 
    		get { return _PatientRewardId; }
    		set
    		{
    			if (Equals(value, _PatientRewardId)) return;
    			_PatientRewardId = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<int> _PatientRewardId;
        [DataMember]
        	public Nullable<int> DaysToExpiration
    	{ 
    		get { return _DaysToExpiration; }
    		set
    		{
    			if (Equals(value, _DaysToExpiration)) return;
    			_DaysToExpiration = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<int> _DaysToExpiration;
        [DataMember]
                    [Required(ErrorMessage="StoreName is required")]
                [StringLength(50)]
    	public string StoreName
    	{ 
    		get { return _StoreName; }
    		set
    		{
    			if (Equals(value, _StoreName)) return;
    			_StoreName = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _StoreName;
        [DataMember]
                    [Required(ErrorMessage="ItemNumber is required")]
    	public int ItemNumber
    	{ 
    		get { return _ItemNumber; }
    		set
    		{
    			if (Equals(value, _ItemNumber)) return;
    			_ItemNumber = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private int _ItemNumber;
        [DataMember]
    	public Patient Patient
    	{
    		get { return _Patient; }
    		set
    		{
    			if (Equals(value, _Patient)) return;
    			_Patient = value;
    			PatientChangeTracker = _Patient == null ? null
    				: new ChangeTrackingCollection<Patient> { _Patient };
    			NotifyPropertyChanged();
    		}
    	}
    	private Patient _Patient;
    	private ChangeTrackingCollection<Patient> PatientChangeTracker { get; set; }
    }
}
