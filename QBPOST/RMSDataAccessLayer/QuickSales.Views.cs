//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(RMSDataAccessLayer.RMSModel),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets60b41a5dd3443e4309d9b40be8d0110c31f1abe435fbc155141e4cd6a5974895))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySets60b41a5dd3443e4309d9b40be8d0110c31f1abe435fbc155141e4cd6a5974895 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "60b41a5dd3443e4309d9b40be8d0110c31f1abe435fbc155141e4cd6a5974895"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "RMSEntitiesStoreContainer.Item")
            {
                return GetView0();
            }

            if (extentName == "RMSEntitiesStoreContainer.Item_Medicine")
            {
                return GetView1();
            }

            if (extentName == "RMSEntitiesStoreContainer.Item_StockItem")
            {
                return GetView2();
            }

            if (extentName == "RMSEntitiesStoreContainer.TransactionBase")
            {
                return GetView3();
            }

            if (extentName == "RMSEntitiesStoreContainer.TransactionBase_Prescription")
            {
                return GetView4();
            }

            if (extentName == "RMSEntitiesStoreContainer.TransactionBase_QuickPrescription")
            {
                return GetView5();
            }

            if (extentName == "RMSEntitiesStoreContainer.TransactionEntryBase")
            {
                return GetView6();
            }

            if (extentName == "RMSEntitiesStoreContainer.TransactionEntryBase_PrescriptionEntry")
            {
                return GetView7();
            }

            if (extentName == "RMSEntitiesStoreContainer.Persons")
            {
                return GetView8();
            }

            if (extentName == "RMSEntitiesStoreContainer.Persons_Cashier")
            {
                return GetView9();
            }

            if (extentName == "RMSEntitiesStoreContainer.Persons_Doctor")
            {
                return GetView10();
            }

            if (extentName == "RMSEntitiesStoreContainer.Persons_Patient")
            {
                return GetView11();
            }

            if (extentName == "RMSEntitiesStoreContainer.TransactionEntryItem")
            {
                return GetView12();
            }

            if (extentName == "RMSEntitiesStoreContainer.QBCustomer")
            {
                return GetView13();
            }

            if (extentName == "RMSEntitiesStoreContainer.QBSales")
            {
                return GetView14();
            }

            if (extentName == "RMSEntitiesStoreContainer.QBSalesDetail")
            {
                return GetView15();
            }

            if (extentName == "RMSModel.Item")
            {
                return GetView16();
            }

            if (extentName == "RMSModel.TransactionBase")
            {
                return GetView17();
            }

            if (extentName == "RMSModel.TransactionEntryBase")
            {
                return GetView18();
            }

            if (extentName == "RMSModel.Persons")
            {
                return GetView19();
            }

            if (extentName == "RMSModel.TransactionEntryItems")
            {
                return GetView20();
            }

            if (extentName == "RMSModel.QBCustomers")
            {
                return GetView21();
            }

            if (extentName == "RMSModel.QBSales")
            {
                return GetView22();
            }

            if (extentName == "RMSModel.QBSalesDetails")
            {
                return GetView23();
            }

            if (extentName == "RMSEntitiesStoreContainer.QBInventoryItems")
            {
                return GetView24();
            }

            if (extentName == "RMSModel.QBInventoryItems")
            {
                return GetView25();
            }

            if (extentName == "RMSEntitiesStoreContainer.IDCardInfo")
            {
                return GetView26();
            }

            if (extentName == "RMSModel.IDCardInfoes")
            {
                return GetView27();
            }

            if (extentName == "RMSEntitiesStoreContainer.PatientAvailableRewards")
            {
                return GetView28();
            }

            if (extentName == "RMSModel.PatientAvailableRewards")
            {
                return GetView29();
            }

            if (extentName == "RMSEntitiesStoreContainer.PatientRewardSale")
            {
                return GetView30();
            }

            if (extentName == "RMSModel.PatientRewardSales")
            {
                return GetView31();
            }

            if (extentName == "RMSEntitiesStoreContainer.Stores")
            {
                return GetView32();
            }

            if (extentName == "RMSModel.Stores")
            {
                return GetView33();
            }

            if (extentName == "RMSEntitiesStoreContainer.MembershipTypes")
            {
                return GetView34();
            }

            if (extentName == "RMSModel.MembershipTypes")
            {
                return GetView35();
            }

            if (extentName == "RMSEntitiesStoreContainer.PatientMembership")
            {
                return GetView36();
            }

            if (extentName == "RMSModel.PatientMemberships")
            {
                return GetView37();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.Item.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Item
        [RMSEntities.Store.Item](T1.Item_Description, T1.Item_ItemName, T1.Item_ItemNumber, T1.Item_ItemNotDiscountable, T1.Item_ItemId, T1.Item_ItemLookupCode, T1.Item_Department, T1.Item_Category, T1.Item_Price, T1.Item_Cost, T1.Item_Quantity, T1.Item_ExtendedDescription, T1.Item_Inactive, T1.Item_DateCreated, T1.Item_SalesTax, T1.Item_QBItemListID, T1.Item_UnitOfMeasure, T1.Item_Size, T1.Item_EntryTimeStamp, T1.Item_QBActive)
    FROM (
        SELECT 
            T.Description AS Item_Description, 
            T.ItemName AS Item_ItemName, 
            T.ItemNumber AS Item_ItemNumber, 
            T.ItemNotDiscountable AS Item_ItemNotDiscountable, 
            T.ItemId AS Item_ItemId, 
            T.ItemLookupCode AS Item_ItemLookupCode, 
            T.Department AS Item_Department, 
            T.Category AS Item_Category, 
            T.Price AS Item_Price, 
            T.Cost AS Item_Cost, 
            T.Quantity AS Item_Quantity, 
            T.ExtendedDescription AS Item_ExtendedDescription, 
            T.Inactive AS Item_Inactive, 
            T.DateCreated AS Item_DateCreated, 
            T.SalesTax AS Item_SalesTax, 
            T.QBItemListID AS Item_QBItemListID, 
            T.UnitOfMeasure AS Item_UnitOfMeasure, 
            T.Size AS Item_Size, 
            T.EntryTimeStamp AS Item_EntryTimeStamp, 
            T.QBActive AS Item_QBActive, 
            True AS _from0
        FROM RMSModel.Item AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.Item_Medicine.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Item_Medicine
        [RMSEntities.Store.Item_Medicine](T1.[Item_Medicine.SuggestedDosage], T1.[Item_Medicine.ItemId], T1.[Item_Medicine.ExpiryDate])
    FROM (
        SELECT 
            TREAT(T AS [RMSEntities.Medicine]).SuggestedDosage AS [Item_Medicine.SuggestedDosage], 
            T.ItemId AS [Item_Medicine.ItemId], 
            TREAT(T AS [RMSEntities.Medicine]).ExpiryDate AS [Item_Medicine.ExpiryDate], 
            True AS _from0
        FROM RMSModel.Item AS T
        WHERE T IS OF (ONLY [RMSEntities.Medicine])
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.Item_StockItem.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Item_StockItem
        [RMSEntities.Store.Item_StockItem](T1.[Item_StockItem.ItemId])
    FROM (
        SELECT 
            T.ItemId AS [Item_StockItem.ItemId], 
            True AS _from0
        FROM RMSModel.Item AS T
        WHERE T IS OF (ONLY [RMSEntities.StockItem])
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.TransactionBase.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TransactionBase
        [RMSEntities.Store.TransactionBase](T1.TransactionBase_StationId, T1.TransactionBase_BatchId, T1.TransactionBase_CloseBatchId, T1.TransactionBase_Time, T1.TransactionBase_CustomerId, T1.TransactionBase_PharmacistId, T1.TransactionBase_CashierId, T1.TransactionBase_Comment, T1.TransactionBase_ReferenceNumber, T1.TransactionBase_StoreCode, T1.TransactionBase_TransactionId, T1.TransactionBase_OpenClose, T1.TransactionBase_Status, T1.TransactionBase_EntryTimeStamp, T1.TransactionBase_ParentTransactionId, T1.TransactionBase_DeliveryType)
    FROM (
        SELECT 
            T.StationId AS TransactionBase_StationId, 
            T.BatchId AS TransactionBase_BatchId, 
            T.CloseBatchId AS TransactionBase_CloseBatchId, 
            T.Time AS TransactionBase_Time, 
            T.CustomerId AS TransactionBase_CustomerId, 
            T.PharmacistId AS TransactionBase_PharmacistId, 
            T.CashierId AS TransactionBase_CashierId, 
            T.Comment AS TransactionBase_Comment, 
            T.ReferenceNumber AS TransactionBase_ReferenceNumber, 
            T.StoreCode AS TransactionBase_StoreCode, 
            T.TransactionId AS TransactionBase_TransactionId, 
            T.OpenClose AS TransactionBase_OpenClose, 
            T.Status AS TransactionBase_Status, 
            T.EntryTimeStamp AS TransactionBase_EntryTimeStamp, 
            T.ParentTransactionId AS TransactionBase_ParentTransactionId, 
            T.DeliveryType AS TransactionBase_DeliveryType, 
            True AS _from0
        FROM RMSModel.TransactionBase AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.TransactionBase_Prescription.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TransactionBase_Prescription
        [RMSEntities.Store.TransactionBase_Prescription](T1.[TransactionBase_Prescription.DoctorId], T1.[TransactionBase_Prescription.PatientId], T1.[TransactionBase_Prescription.TransactionId], T1.[TransactionBase_Prescription.ParentPrescriptionId])
    FROM (
        SELECT 
            TREAT(T AS [RMSEntities.Prescription]).DoctorId AS [TransactionBase_Prescription.DoctorId], 
            TREAT(T AS [RMSEntities.Prescription]).PatientId AS [TransactionBase_Prescription.PatientId], 
            T.TransactionId AS [TransactionBase_Prescription.TransactionId], 
            TREAT(T AS [RMSEntities.Prescription]).ParentPrescriptionId AS [TransactionBase_Prescription.ParentPrescriptionId], 
            True AS _from0
        FROM RMSModel.TransactionBase AS T
        WHERE T IS OF (ONLY [RMSEntities.Prescription])
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.TransactionBase_QuickPrescription.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TransactionBase_QuickPrescription
        [RMSEntities.Store.TransactionBase_QuickPrescription](T1.[TransactionBase_QuickPrescription.TransactionId], T1.[TransactionBase_QuickPrescription.PatientId])
    FROM (
        SELECT 
            T.TransactionId AS [TransactionBase_QuickPrescription.TransactionId], 
            TREAT(T AS [RMSEntities.QuickPrescription]).PatientId AS [TransactionBase_QuickPrescription.PatientId], 
            True AS _from0
        FROM RMSModel.TransactionBase AS T
        WHERE T IS OF (ONLY [RMSEntities.QuickPrescription])
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.TransactionEntryBase.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TransactionEntryBase
        [RMSEntities.Store.TransactionEntryBase](T1.TransactionEntryBase_StoreID, T1.TransactionEntryBase_TransactionEntryId, T1.TransactionEntryBase_TransactionId, T1.TransactionEntryBase_Price, T1.TransactionEntryBase_Quantity, T1.TransactionEntryBase_Taxable, T1.TransactionEntryBase_Comment, T1.TransactionEntryBase_TransactionTime, T1.TransactionEntryBase_SalesTaxPercent, T1.TransactionEntryBase_Discount, T1.TransactionEntryBase_EntryNumber, T1.TransactionEntryBase_EntryTimeStamp)
    FROM (
        SELECT 
            T.StoreID AS TransactionEntryBase_StoreID, 
            T.TransactionEntryId AS TransactionEntryBase_TransactionEntryId, 
            T.TransactionId AS TransactionEntryBase_TransactionId, 
            T.Price AS TransactionEntryBase_Price, 
            T.Quantity AS TransactionEntryBase_Quantity, 
            T.Taxable AS TransactionEntryBase_Taxable, 
            T.Comment AS TransactionEntryBase_Comment, 
            T.TransactionTime AS TransactionEntryBase_TransactionTime, 
            T.SalesTaxPercent AS TransactionEntryBase_SalesTaxPercent, 
            T.Discount AS TransactionEntryBase_Discount, 
            T.EntryNumber AS TransactionEntryBase_EntryNumber, 
            T.EntryTimeStamp AS TransactionEntryBase_EntryTimeStamp, 
            True AS _from0
        FROM RMSModel.TransactionEntryBase AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.TransactionEntryBase_PrescriptionEntry.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TransactionEntryBase_PrescriptionEntry
        [RMSEntities.Store.TransactionEntryBase_PrescriptionEntry](T1.[TransactionEntryBase_PrescriptionEntry.Dosage], T1.[TransactionEntryBase_PrescriptionEntry.ExpiryDate], T1.[TransactionEntryBase_PrescriptionEntry.TransactionEntryId], T1.[TransactionEntryBase_PrescriptionEntry.Repeat], T1.[TransactionEntryBase_PrescriptionEntry.RepeatQuantity])
    FROM (
        SELECT 
            TREAT(T AS [RMSEntities.PrescriptionEntry]).Dosage AS [TransactionEntryBase_PrescriptionEntry.Dosage], 
            TREAT(T AS [RMSEntities.PrescriptionEntry]).ExpiryDate AS [TransactionEntryBase_PrescriptionEntry.ExpiryDate], 
            T.TransactionEntryId AS [TransactionEntryBase_PrescriptionEntry.TransactionEntryId], 
            TREAT(T AS [RMSEntities.PrescriptionEntry]).Repeat AS [TransactionEntryBase_PrescriptionEntry.Repeat], 
            TREAT(T AS [RMSEntities.PrescriptionEntry]).RepeatQuantity AS [TransactionEntryBase_PrescriptionEntry.RepeatQuantity], 
            True AS _from0
        FROM RMSModel.TransactionEntryBase AS T
        WHERE T IS OF (ONLY [RMSEntities.PrescriptionEntry])
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.Persons.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Persons
        [RMSEntities.Store.Persons](T1.Persons_Id, T1.Persons_FirstName, T1.Persons_LastName, T1.Persons_CompanyName, T1.Persons_Salutation, T1.Persons_Address, T1.Persons_PhoneNumber, T1.Persons_InActive, T1.Persons_DOB, T1.Persons_Sex, T1.Persons_EntryTimeStamp)
    FROM (
        SELECT 
            T.Id AS Persons_Id, 
            T.FirstName AS Persons_FirstName, 
            T.LastName AS Persons_LastName, 
            T.CompanyName AS Persons_CompanyName, 
            T.Salutation AS Persons_Salutation, 
            T.Address AS Persons_Address, 
            T.PhoneNumber AS Persons_PhoneNumber, 
            T.InActive AS Persons_InActive, 
            T.DOB AS Persons_DOB, 
            T.Sex AS Persons_Sex, 
            T.EntryTimeStamp AS Persons_EntryTimeStamp, 
            True AS _from0
        FROM RMSModel.Persons AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.Persons_Cashier.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Persons_Cashier
        [RMSEntities.Store.Persons_Cashier](T1.[Persons_Cashier.SPassword], T1.[Persons_Cashier.LoginName], T1.[Persons_Cashier.Id], T1.[Persons_Cashier.Role], T1.[Persons_Cashier.Initials], T1.[Persons_Cashier.IsActive])
    FROM (
        SELECT 
            TREAT(T AS [RMSEntities.Cashier]).SPassword AS [Persons_Cashier.SPassword], 
            TREAT(T AS [RMSEntities.Cashier]).LoginName AS [Persons_Cashier.LoginName], 
            T.Id AS [Persons_Cashier.Id], 
            TREAT(T AS [RMSEntities.Cashier]).Role AS [Persons_Cashier.Role], 
            TREAT(T AS [RMSEntities.Cashier]).Initials AS [Persons_Cashier.Initials], 
            TREAT(T AS [RMSEntities.Cashier]).IsActive AS [Persons_Cashier.IsActive], 
            True AS _from0
        FROM RMSModel.Persons AS T
        WHERE T IS OF (ONLY [RMSEntities.Cashier])
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.Persons_Doctor.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Persons_Doctor
        [RMSEntities.Store.Persons_Doctor](T1.[Persons_Doctor.Code], T1.[Persons_Doctor.Id], T1.[Persons_Doctor.Discount])
    FROM (
        SELECT 
            TREAT(T AS [RMSEntities.Doctor]).Code AS [Persons_Doctor.Code], 
            T.Id AS [Persons_Doctor.Id], 
            TREAT(T AS [RMSEntities.Doctor]).Discount AS [Persons_Doctor.Discount], 
            True AS _from0
        FROM RMSModel.Persons AS T
        WHERE T IS OF (ONLY [RMSEntities.Doctor])
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.Persons_Patient.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Persons_Patient
        [RMSEntities.Store.Persons_Patient](T1.[Persons_Patient.Id], T1.[Persons_Patient.Allergies], T1.[Persons_Patient.Guardian], T1.[Persons_Patient.Discount], T1.[Persons_Patient.TotalSales], T1.[Persons_Patient.StartingSales])
    FROM (
        SELECT 
            T.Id AS [Persons_Patient.Id], 
            TREAT(T AS [RMSEntities.Patient]).Allergies AS [Persons_Patient.Allergies], 
            TREAT(T AS [RMSEntities.Patient]).Guardian AS [Persons_Patient.Guardian], 
            TREAT(T AS [RMSEntities.Patient]).Discount AS [Persons_Patient.Discount], 
            TREAT(T AS [RMSEntities.Patient]).TotalSales AS [Persons_Patient.TotalSales], 
            TREAT(T AS [RMSEntities.Patient]).StartingSales AS [Persons_Patient.StartingSales], 
            True AS _from0
        FROM RMSModel.Persons AS T
        WHERE T IS OF (ONLY [RMSEntities.Patient])
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.TransactionEntryItem.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TransactionEntryItem
        [RMSEntities.Store.TransactionEntryItem](T1.TransactionEntryItem_TransactionEntryId, T1.TransactionEntryItem_QBItemListID, T1.TransactionEntryItem_ItemNumber, T1.TransactionEntryItem_ItemName, T1.TransactionEntryItem_ItemId)
    FROM (
        SELECT 
            T.TransactionEntryId AS TransactionEntryItem_TransactionEntryId, 
            T.QBItemListID AS TransactionEntryItem_QBItemListID, 
            T.ItemNumber AS TransactionEntryItem_ItemNumber, 
            T.ItemName AS TransactionEntryItem_ItemName, 
            T.ItemId AS TransactionEntryItem_ItemId, 
            True AS _from0
        FROM RMSModel.TransactionEntryItems AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.QBCustomer.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing QBCustomer
        [RMSEntities.Store.QBCustomer](T1.QBCustomer_Id, T1.QBCustomer_CustomerListID, T1.QBCustomer_CustomerDiscPercent, T1.QBCustomer_CustomerDiscType, T1.QBCustomer_PriceLevelNumber, T1.QBCustomer_IsRewardsMember, T1.QBCustomer_LastSale, T1.QBCustomer_RewardAmount, T1.QBCustomer_RewardPercent, T1.QBCustomer_EarnedDate, T1.QBCustomer_ExpirationDate, T1.QBCustomer_Source)
    FROM (
        SELECT 
            T.Id AS QBCustomer_Id, 
            T.CustomerListID AS QBCustomer_CustomerListID, 
            T.CustomerDiscPercent AS QBCustomer_CustomerDiscPercent, 
            T.CustomerDiscType AS QBCustomer_CustomerDiscType, 
            T.PriceLevelNumber AS QBCustomer_PriceLevelNumber, 
            T.IsRewardsMember AS QBCustomer_IsRewardsMember, 
            T.LastSale AS QBCustomer_LastSale, 
            T.RewardAmount AS QBCustomer_RewardAmount, 
            T.RewardPercent AS QBCustomer_RewardPercent, 
            T.EarnedDate AS QBCustomer_EarnedDate, 
            T.ExpirationDate AS QBCustomer_ExpirationDate, 
            T.Source AS QBCustomer_Source, 
            True AS _from0
        FROM RMSModel.QBCustomers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.QBSales.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing QBSales
        [RMSEntities.Store.QBSales](T1.QBSales_Id, T1.QBSales_QBCustomerId, T1.QBSales_SalesRecieptNumber)
    FROM (
        SELECT 
            T.Id AS QBSales_Id, 
            T.QBCustomerId AS QBSales_QBCustomerId, 
            T.SalesRecieptNumber AS QBSales_SalesRecieptNumber, 
            True AS _from0
        FROM RMSModel.QBSales AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.QBSalesDetail.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing QBSalesDetail
        [RMSEntities.Store.QBSalesDetail](T1.QBSalesDetail_Id, T1.QBSalesDetail_TxnDate, T1.QBSalesDetail_Total)
    FROM (
        SELECT 
            T.Id AS QBSalesDetail_Id, 
            T.TxnDate AS QBSalesDetail_TxnDate, 
            T.Total AS QBSalesDetail_Total, 
            True AS _from0
        FROM RMSModel.QBSalesDetails AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSModel.Item.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Item
        CASE
            WHEN (NOT(T4._from1) AND NOT(T4._from2)) THEN [RMSEntities.Item](T4.Item_Description, T4.Item_ItemNotDiscountable, T4.Item_ItemId, T4.Item_ItemLookupCode, T4.Item_Department, T4.Item_Category, T4.Item_Price, T4.Item_Cost, T4.Item_Quantity, T4.Item_ExtendedDescription, T4.Item_Inactive, T4.Item_DateCreated, T4.Item_SalesTax, T4.Item_QBItemListID, T4.Item_UnitOfMeasure, T4.Item_ItemName, T4.Item_ItemNumber, T4.Item_Size, T4.Item_EntryTimeStamp, T4.Item_QBActive)
            WHEN T4._from1 THEN [RMSEntities.Medicine](T4.Item_Description, T4.Item_ItemNotDiscountable, T4.Item_ItemId, T4.Item_ItemLookupCode, T4.Item_Department, T4.Item_Category, T4.Item_Price, T4.Item_Cost, T4.Item_Quantity, T4.Item_ExtendedDescription, T4.Item_Inactive, T4.Item_DateCreated, T4.Item_SalesTax, T4.Item_QBItemListID, T4.Item_UnitOfMeasure, T4.Item_ItemName, T4.Item_ItemNumber, T4.Item_Size, T4.Item_EntryTimeStamp, T4.Item_QBActive, T4.Medicine_SuggestedDosage, T4.Medicine_ExpiryDate)
            ELSE [RMSEntities.StockItem](T4.Item_Description, T4.Item_ItemNotDiscountable, T4.Item_ItemId, T4.Item_ItemLookupCode, T4.Item_Department, T4.Item_Category, T4.Item_Price, T4.Item_Cost, T4.Item_Quantity, T4.Item_ExtendedDescription, T4.Item_Inactive, T4.Item_DateCreated, T4.Item_SalesTax, T4.Item_QBItemListID, T4.Item_UnitOfMeasure, T4.Item_ItemName, T4.Item_ItemNumber, T4.Item_Size, T4.Item_EntryTimeStamp, T4.Item_QBActive)
        END
    FROM (
        SELECT T1.Item_Description, T1.Item_ItemNotDiscountable, T1.Item_ItemId, T1.Item_ItemLookupCode, T1.Item_Department, T1.Item_Category, T1.Item_Price, T1.Item_Cost, T1.Item_Quantity, T1.Item_ExtendedDescription, T1.Item_Inactive, T1.Item_DateCreated, T1.Item_SalesTax, T1.Item_QBItemListID, T1.Item_UnitOfMeasure, T1.Item_ItemName, T1.Item_ItemNumber, T1.Item_Size, T1.Item_EntryTimeStamp, T1.Item_QBActive, T2.Medicine_SuggestedDosage, T2.Medicine_ExpiryDate, T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T3._from2 AND T3._from2 IS NOT NULL) AS _from2
        FROM  (
            SELECT 
                T.Description AS Item_Description, 
                T.ItemNotDiscountable AS Item_ItemNotDiscountable, 
                T.ItemId AS Item_ItemId, 
                T.ItemLookupCode AS Item_ItemLookupCode, 
                T.Department AS Item_Department, 
                T.Category AS Item_Category, 
                T.Price AS Item_Price, 
                T.Cost AS Item_Cost, 
                T.Quantity AS Item_Quantity, 
                T.ExtendedDescription AS Item_ExtendedDescription, 
                T.Inactive AS Item_Inactive, 
                T.DateCreated AS Item_DateCreated, 
                T.SalesTax AS Item_SalesTax, 
                T.QBItemListID AS Item_QBItemListID, 
                T.UnitOfMeasure AS Item_UnitOfMeasure, 
                T.ItemName AS Item_ItemName, 
                T.ItemNumber AS Item_ItemNumber, 
                T.Size AS Item_Size, 
                T.EntryTimeStamp AS Item_EntryTimeStamp, 
                T.QBActive AS Item_QBActive, 
                True AS _from0
            FROM RMSEntitiesStoreContainer.Item AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                T.ItemId AS Item_ItemId, 
                T.SuggestedDosage AS Medicine_SuggestedDosage, 
                T.ExpiryDate AS Medicine_ExpiryDate, 
                True AS _from1
            FROM RMSEntitiesStoreContainer.Item_Medicine AS T) AS T2
            ON T1.Item_ItemId = T2.Item_ItemId
            LEFT OUTER JOIN (
            SELECT 
                T.ItemId AS Item_ItemId, 
                True AS _from2
            FROM RMSEntitiesStoreContainer.Item_StockItem AS T) AS T3
            ON T1.Item_ItemId = T3.Item_ItemId
    ) AS T4");
        }

        /// <summary>
        /// Gets the view for RMSModel.TransactionBase.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TransactionBase
        CASE
            WHEN (NOT(T4._from1) AND NOT(T4._from2)) THEN [RMSEntities.TransactionBase](T4.TransactionBase_StationId, T4.TransactionBase_BatchId, T4.TransactionBase_CloseBatchId, T4.TransactionBase_Time, T4.TransactionBase_CustomerId, T4.TransactionBase_CashierId, T4.TransactionBase_Comment, T4.TransactionBase_ReferenceNumber, T4.TransactionBase_StoreCode, T4.TransactionBase_TransactionId, T4.TransactionBase_OpenClose, T4.TransactionBase_PharmacistId, T4.TransactionBase_Status, T4.TransactionBase_EntryTimeStamp, T4.TransactionBase_ParentTransactionId, T4.TransactionBase_DeliveryType)
            WHEN T4._from1 THEN [RMSEntities.Prescription](T4.TransactionBase_StationId, T4.TransactionBase_BatchId, T4.TransactionBase_CloseBatchId, T4.TransactionBase_Time, T4.TransactionBase_CustomerId, T4.TransactionBase_CashierId, T4.TransactionBase_Comment, T4.TransactionBase_ReferenceNumber, T4.TransactionBase_StoreCode, T4.TransactionBase_TransactionId, T4.TransactionBase_OpenClose, T4.TransactionBase_PharmacistId, T4.TransactionBase_Status, T4.TransactionBase_EntryTimeStamp, T4.TransactionBase_ParentTransactionId, T4.TransactionBase_DeliveryType, T4.Prescription_DoctorId, T4.Prescription_PatientId, T4.Prescription_ParentPrescriptionId)
            ELSE [RMSEntities.QuickPrescription](T4.TransactionBase_StationId, T4.TransactionBase_BatchId, T4.TransactionBase_CloseBatchId, T4.TransactionBase_Time, T4.TransactionBase_CustomerId, T4.TransactionBase_CashierId, T4.TransactionBase_Comment, T4.TransactionBase_ReferenceNumber, T4.TransactionBase_StoreCode, T4.TransactionBase_TransactionId, T4.TransactionBase_OpenClose, T4.TransactionBase_PharmacistId, T4.TransactionBase_Status, T4.TransactionBase_EntryTimeStamp, T4.TransactionBase_ParentTransactionId, T4.TransactionBase_DeliveryType, T4.QuickPrescription_PatientId)
        END
    FROM (
        SELECT T1.TransactionBase_StationId, T1.TransactionBase_BatchId, T1.TransactionBase_CloseBatchId, T1.TransactionBase_Time, T1.TransactionBase_CustomerId, T1.TransactionBase_CashierId, T1.TransactionBase_Comment, T1.TransactionBase_ReferenceNumber, T1.TransactionBase_StoreCode, T1.TransactionBase_TransactionId, T1.TransactionBase_OpenClose, T1.TransactionBase_PharmacistId, T1.TransactionBase_Status, T1.TransactionBase_EntryTimeStamp, T1.TransactionBase_ParentTransactionId, T1.TransactionBase_DeliveryType, T2.Prescription_DoctorId, T2.Prescription_PatientId, T2.Prescription_ParentPrescriptionId, T3.QuickPrescription_PatientId, T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T3._from2 AND T3._from2 IS NOT NULL) AS _from2
        FROM  (
            SELECT 
                T.StationId AS TransactionBase_StationId, 
                T.BatchId AS TransactionBase_BatchId, 
                T.CloseBatchId AS TransactionBase_CloseBatchId, 
                T.Time AS TransactionBase_Time, 
                T.CustomerId AS TransactionBase_CustomerId, 
                T.CashierId AS TransactionBase_CashierId, 
                T.Comment AS TransactionBase_Comment, 
                T.ReferenceNumber AS TransactionBase_ReferenceNumber, 
                T.StoreCode AS TransactionBase_StoreCode, 
                T.TransactionId AS TransactionBase_TransactionId, 
                T.OpenClose AS TransactionBase_OpenClose, 
                T.PharmacistId AS TransactionBase_PharmacistId, 
                T.Status AS TransactionBase_Status, 
                T.EntryTimeStamp AS TransactionBase_EntryTimeStamp, 
                T.ParentTransactionId AS TransactionBase_ParentTransactionId, 
                T.DeliveryType AS TransactionBase_DeliveryType, 
                True AS _from0
            FROM RMSEntitiesStoreContainer.TransactionBase AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                T.TransactionId AS TransactionBase_TransactionId, 
                T.DoctorId AS Prescription_DoctorId, 
                T.PatientId AS Prescription_PatientId, 
                T.ParentPrescriptionId AS Prescription_ParentPrescriptionId, 
                True AS _from1
            FROM RMSEntitiesStoreContainer.TransactionBase_Prescription AS T) AS T2
            ON T1.TransactionBase_TransactionId = T2.TransactionBase_TransactionId
            LEFT OUTER JOIN (
            SELECT 
                T.TransactionId AS TransactionBase_TransactionId, 
                T.PatientId AS QuickPrescription_PatientId, 
                True AS _from2
            FROM RMSEntitiesStoreContainer.TransactionBase_QuickPrescription AS T) AS T3
            ON T1.TransactionBase_TransactionId = T3.TransactionBase_TransactionId
    ) AS T4");
        }

        /// <summary>
        /// Gets the view for RMSModel.TransactionEntryBase.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TransactionEntryBase
        CASE
            WHEN NOT(T3._from1) THEN [RMSEntities.TransactionEntryBase](T3.TransactionEntryBase_StoreID, T3.TransactionEntryBase_TransactionEntryId, T3.TransactionEntryBase_TransactionId, T3.TransactionEntryBase_Quantity, T3.TransactionEntryBase_Taxable, T3.TransactionEntryBase_Comment, T3.TransactionEntryBase_TransactionTime, T3.TransactionEntryBase_SalesTaxPercent, T3.TransactionEntryBase_Discount, T3.TransactionEntryBase_EntryNumber, T3.TransactionEntryBase_EntryTimeStamp, T3.TransactionEntryBase_Price)
            ELSE [RMSEntities.PrescriptionEntry](T3.TransactionEntryBase_StoreID, T3.TransactionEntryBase_TransactionEntryId, T3.TransactionEntryBase_TransactionId, T3.TransactionEntryBase_Quantity, T3.TransactionEntryBase_Taxable, T3.TransactionEntryBase_Comment, T3.TransactionEntryBase_TransactionTime, T3.TransactionEntryBase_SalesTaxPercent, T3.TransactionEntryBase_Discount, T3.TransactionEntryBase_EntryNumber, T3.TransactionEntryBase_EntryTimeStamp, T3.TransactionEntryBase_Price, T3.PrescriptionEntry_Dosage, T3.PrescriptionEntry_ExpiryDate, T3.PrescriptionEntry_Repeat, T3.PrescriptionEntry_RepeatQuantity)
        END
    FROM (
        SELECT T1.TransactionEntryBase_StoreID, T1.TransactionEntryBase_TransactionEntryId, T1.TransactionEntryBase_TransactionId, T1.TransactionEntryBase_Quantity, T1.TransactionEntryBase_Taxable, T1.TransactionEntryBase_Comment, T1.TransactionEntryBase_TransactionTime, T1.TransactionEntryBase_SalesTaxPercent, T1.TransactionEntryBase_Discount, T1.TransactionEntryBase_EntryNumber, T1.TransactionEntryBase_EntryTimeStamp, T1.TransactionEntryBase_Price, T2.PrescriptionEntry_Dosage, T2.PrescriptionEntry_ExpiryDate, T2.PrescriptionEntry_Repeat, T2.PrescriptionEntry_RepeatQuantity, T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.StoreID AS TransactionEntryBase_StoreID, 
                T.TransactionEntryId AS TransactionEntryBase_TransactionEntryId, 
                T.TransactionId AS TransactionEntryBase_TransactionId, 
                T.Quantity AS TransactionEntryBase_Quantity, 
                T.Taxable AS TransactionEntryBase_Taxable, 
                T.Comment AS TransactionEntryBase_Comment, 
                T.TransactionTime AS TransactionEntryBase_TransactionTime, 
                T.SalesTaxPercent AS TransactionEntryBase_SalesTaxPercent, 
                T.Discount AS TransactionEntryBase_Discount, 
                T.EntryNumber AS TransactionEntryBase_EntryNumber, 
                T.EntryTimeStamp AS TransactionEntryBase_EntryTimeStamp, 
                T.Price AS TransactionEntryBase_Price, 
                True AS _from0
            FROM RMSEntitiesStoreContainer.TransactionEntryBase AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                T.TransactionEntryId AS TransactionEntryBase_TransactionEntryId, 
                T.Dosage AS PrescriptionEntry_Dosage, 
                T.ExpiryDate AS PrescriptionEntry_ExpiryDate, 
                T.Repeat AS PrescriptionEntry_Repeat, 
                T.RepeatQuantity AS PrescriptionEntry_RepeatQuantity, 
                True AS _from1
            FROM RMSEntitiesStoreContainer.TransactionEntryBase_PrescriptionEntry AS T) AS T2
            ON T1.TransactionEntryBase_TransactionEntryId = T2.TransactionEntryBase_TransactionEntryId
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for RMSModel.Persons.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Persons
        CASE
            WHEN (NOT(T5._from1) AND NOT(T5._from2) AND NOT(T5._from3)) THEN [RMSEntities.Person](T5.Person_Id, T5.Person_FirstName, T5.Person_LastName, T5.Person_CompanyName, T5.Person_Salutation, T5.Person_Address, T5.Person_PhoneNumber, T5.Person_InActive, T5.Person_Sex, T5.Person_DOB, T5.Person_EntryTimeStamp)
            WHEN T5._from2 THEN [RMSEntities.Cashier](T5.Person_Id, T5.Person_FirstName, T5.Person_LastName, T5.Person_CompanyName, T5.Person_Salutation, T5.Person_Address, T5.Person_PhoneNumber, T5.Person_InActive, T5.Person_Sex, T5.Person_DOB, T5.Person_EntryTimeStamp, T5.Cashier_SPassword, T5.Cashier_LoginName, T5.Cashier_Role, T5.Cashier_Initials, T5.Cashier_IsActive)
            WHEN T5._from3 THEN [RMSEntities.Doctor](T5.Person_Id, T5.Person_FirstName, T5.Person_LastName, T5.Person_CompanyName, T5.Person_Salutation, T5.Person_Address, T5.Person_PhoneNumber, T5.Person_InActive, T5.Person_Sex, T5.Person_DOB, T5.Person_EntryTimeStamp, T5.Doctor_Code, T5.Doctor_Discount)
            ELSE [RMSEntities.Patient](T5.Person_Id, T5.Person_FirstName, T5.Person_LastName, T5.Person_CompanyName, T5.Person_Salutation, T5.Person_Address, T5.Person_PhoneNumber, T5.Person_InActive, T5.Person_Sex, T5.Person_DOB, T5.Person_EntryTimeStamp, T5.Patient_Allergies, T5.Patient_Guardian, T5.Patient_Discount, T5.Patient_TotalSales, T5.Patient_StartingSales)
        END
    FROM (
        SELECT T1.Person_Id, T1.Person_FirstName, T1.Person_LastName, T1.Person_CompanyName, T1.Person_Salutation, T1.Person_Address, T1.Person_PhoneNumber, T1.Person_InActive, T1.Person_Sex, T1.Person_DOB, T1.Person_EntryTimeStamp, T4.Cashier_SPassword, T4.Cashier_LoginName, T4.Cashier_Role, T4.Cashier_Initials, T4.Cashier_IsActive, T3.Doctor_Code, T3.Doctor_Discount, T2.Patient_Allergies, T2.Patient_Guardian, T2.Patient_Discount, T2.Patient_TotalSales, T2.Patient_StartingSales, T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T4._from2 AND T4._from2 IS NOT NULL) AS _from2, (T3._from3 AND T3._from3 IS NOT NULL) AS _from3
        FROM  (
            SELECT 
                T.Id AS Person_Id, 
                T.FirstName AS Person_FirstName, 
                T.LastName AS Person_LastName, 
                T.CompanyName AS Person_CompanyName, 
                T.Salutation AS Person_Salutation, 
                T.Address AS Person_Address, 
                T.PhoneNumber AS Person_PhoneNumber, 
                T.InActive AS Person_InActive, 
                T.Sex AS Person_Sex, 
                T.DOB AS Person_DOB, 
                T.EntryTimeStamp AS Person_EntryTimeStamp, 
                True AS _from0
            FROM RMSEntitiesStoreContainer.Persons AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                T.Id AS Person_Id, 
                T.Allergies AS Patient_Allergies, 
                T.Guardian AS Patient_Guardian, 
                T.Discount AS Patient_Discount, 
                T.TotalSales AS Patient_TotalSales, 
                T.StartingSales AS Patient_StartingSales, 
                True AS _from1
            FROM RMSEntitiesStoreContainer.Persons_Patient AS T) AS T2
            ON T1.Person_Id = T2.Person_Id
            LEFT OUTER JOIN (
            SELECT 
                T.Id AS Person_Id, 
                T.Code AS Doctor_Code, 
                T.Discount AS Doctor_Discount, 
                True AS _from3
            FROM RMSEntitiesStoreContainer.Persons_Doctor AS T) AS T3
            ON T1.Person_Id = T3.Person_Id
            LEFT OUTER JOIN (
            SELECT 
                T.Id AS Person_Id, 
                T.SPassword AS Cashier_SPassword, 
                T.LoginName AS Cashier_LoginName, 
                T.Role AS Cashier_Role, 
                T.Initials AS Cashier_Initials, 
                T.IsActive AS Cashier_IsActive, 
                True AS _from2
            FROM RMSEntitiesStoreContainer.Persons_Cashier AS T) AS T4
            ON T1.Person_Id = T4.Person_Id
    ) AS T5");
        }

        /// <summary>
        /// Gets the view for RMSModel.TransactionEntryItems.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TransactionEntryItems
        [RMSEntities.TransactionEntryItem](T1.TransactionEntryItem_TransactionEntryId, T1.TransactionEntryItem_QBItemListID, T1.TransactionEntryItem_ItemNumber, T1.TransactionEntryItem_ItemName, T1.TransactionEntryItem_ItemId)
    FROM (
        SELECT 
            T.TransactionEntryId AS TransactionEntryItem_TransactionEntryId, 
            T.QBItemListID AS TransactionEntryItem_QBItemListID, 
            T.ItemNumber AS TransactionEntryItem_ItemNumber, 
            T.ItemName AS TransactionEntryItem_ItemName, 
            T.ItemId AS TransactionEntryItem_ItemId, 
            True AS _from0
        FROM RMSEntitiesStoreContainer.TransactionEntryItem AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSModel.QBCustomers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing QBCustomers
        [RMSEntities.QBCustomer](T1.QBCustomer_Id, T1.QBCustomer_CustomerListID, T1.QBCustomer_CustomerDiscPercent, T1.QBCustomer_CustomerDiscType, T1.QBCustomer_PriceLevelNumber, T1.QBCustomer_IsRewardsMember, T1.QBCustomer_LastSale, T1.QBCustomer_RewardAmount, T1.QBCustomer_RewardPercent, T1.QBCustomer_EarnedDate, T1.QBCustomer_ExpirationDate, T1.QBCustomer_Source)
    FROM (
        SELECT 
            T.Id AS QBCustomer_Id, 
            T.CustomerListID AS QBCustomer_CustomerListID, 
            T.CustomerDiscPercent AS QBCustomer_CustomerDiscPercent, 
            T.CustomerDiscType AS QBCustomer_CustomerDiscType, 
            T.PriceLevelNumber AS QBCustomer_PriceLevelNumber, 
            T.IsRewardsMember AS QBCustomer_IsRewardsMember, 
            T.LastSale AS QBCustomer_LastSale, 
            T.RewardAmount AS QBCustomer_RewardAmount, 
            T.RewardPercent AS QBCustomer_RewardPercent, 
            T.EarnedDate AS QBCustomer_EarnedDate, 
            T.ExpirationDate AS QBCustomer_ExpirationDate, 
            T.Source AS QBCustomer_Source, 
            True AS _from0
        FROM RMSEntitiesStoreContainer.QBCustomer AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSModel.QBSales.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing QBSales
        [RMSEntities.QBSale](T1.QBSale_Id, T1.QBSale_QBCustomerId, T1.QBSale_SalesRecieptNumber)
    FROM (
        SELECT 
            T.Id AS QBSale_Id, 
            T.QBCustomerId AS QBSale_QBCustomerId, 
            T.SalesRecieptNumber AS QBSale_SalesRecieptNumber, 
            True AS _from0
        FROM RMSEntitiesStoreContainer.QBSales AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSModel.QBSalesDetails.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing QBSalesDetails
        [RMSEntities.QBSalesDetail](T1.QBSalesDetail_Id, T1.QBSalesDetail_TxnDate, T1.QBSalesDetail_Total)
    FROM (
        SELECT 
            T.Id AS QBSalesDetail_Id, 
            T.TxnDate AS QBSalesDetail_TxnDate, 
            T.Total AS QBSalesDetail_Total, 
            True AS _from0
        FROM RMSEntitiesStoreContainer.QBSalesDetail AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.QBInventoryItems.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing QBInventoryItems
        [RMSEntities.Store.QBInventoryItems](T1.QBInventoryItems_ListID, T1.QBInventoryItems_ItemDesc2, T1.QBInventoryItems_ItemName, T1.QBInventoryItems_Size, T1.QBInventoryItems_DepartmentCode, T1.QBInventoryItems_ItemNumber, T1.QBInventoryItems_TaxCode, T1.QBInventoryItems_Price, T1.QBInventoryItems_Quantity, T1.QBInventoryItems_UnitOfMeasure, T1.QBInventoryItems_EntryTimeStamp)
    FROM (
        SELECT 
            T.ListID AS QBInventoryItems_ListID, 
            T.ItemDesc2 AS QBInventoryItems_ItemDesc2, 
            T.ItemName AS QBInventoryItems_ItemName, 
            T.Size AS QBInventoryItems_Size, 
            T.DepartmentCode AS QBInventoryItems_DepartmentCode, 
            T.ItemNumber AS QBInventoryItems_ItemNumber, 
            T.TaxCode AS QBInventoryItems_TaxCode, 
            T.Price AS QBInventoryItems_Price, 
            T.Quantity AS QBInventoryItems_Quantity, 
            T.UnitOfMeasure AS QBInventoryItems_UnitOfMeasure, 
            T.EntryTimeStamp AS QBInventoryItems_EntryTimeStamp, 
            True AS _from0
        FROM RMSModel.QBInventoryItems AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSModel.QBInventoryItems.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing QBInventoryItems
        [RMSEntities.QBInventoryItem](T1.QBInventoryItem_ListID, T1.QBInventoryItem_ItemDesc2, T1.QBInventoryItem_ItemName, T1.QBInventoryItem_Size, T1.QBInventoryItem_DepartmentCode, T1.QBInventoryItem_ItemNumber, T1.QBInventoryItem_TaxCode, T1.QBInventoryItem_Price, T1.QBInventoryItem_Quantity, T1.QBInventoryItem_UnitOfMeasure, T1.QBInventoryItem_EntryTimeStamp)
    FROM (
        SELECT 
            T.ListID AS QBInventoryItem_ListID, 
            T.ItemDesc2 AS QBInventoryItem_ItemDesc2, 
            T.ItemName AS QBInventoryItem_ItemName, 
            T.Size AS QBInventoryItem_Size, 
            T.DepartmentCode AS QBInventoryItem_DepartmentCode, 
            T.ItemNumber AS QBInventoryItem_ItemNumber, 
            T.TaxCode AS QBInventoryItem_TaxCode, 
            T.Price AS QBInventoryItem_Price, 
            T.Quantity AS QBInventoryItem_Quantity, 
            T.UnitOfMeasure AS QBInventoryItem_UnitOfMeasure, 
            T.EntryTimeStamp AS QBInventoryItem_EntryTimeStamp, 
            True AS _from0
        FROM RMSEntitiesStoreContainer.QBInventoryItems AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.IDCardInfo.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView26()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IDCardInfo
        [RMSEntities.Store.IDCardInfo](T1.IDCardInfo_PatientId, T1.IDCardInfo_FirstName, T1.IDCardInfo_LastName, T1.IDCardInfo_Address, T1.IDCardInfo_PhoneNumber, T1.IDCardInfo_CardId, T1.IDCardInfo_TotalSales, T1.IDCardInfo_Points, T1.IDCardInfo_Membership, T1.IDCardInfo_EntrySalesAmount, T1.IDCardInfo_MaxSalesAmount, T1.IDCardInfo_PointRatePerDollar, T1.IDCardInfo_Discount, T1.IDCardInfo_QuickBooksPriceLevel, T1.IDCardInfo_Store, T1.IDCardInfo_MembershipId)
    FROM (
        SELECT 
            T.PatientId AS IDCardInfo_PatientId, 
            T.FirstName AS IDCardInfo_FirstName, 
            T.LastName AS IDCardInfo_LastName, 
            T.Address AS IDCardInfo_Address, 
            T.PhoneNumber AS IDCardInfo_PhoneNumber, 
            T.CardId AS IDCardInfo_CardId, 
            T.TotalSales AS IDCardInfo_TotalSales, 
            CAST(T.Points AS [Edm.Double]) AS IDCardInfo_Points, 
            T.Membership AS IDCardInfo_Membership, 
            T.EntrySalesAmount AS IDCardInfo_EntrySalesAmount, 
            T.MaxSalesAmount AS IDCardInfo_MaxSalesAmount, 
            T.PointRatePerDollar AS IDCardInfo_PointRatePerDollar, 
            T.Discount AS IDCardInfo_Discount, 
            T.QuickBooksPriceLevel AS IDCardInfo_QuickBooksPriceLevel, 
            T.Store AS IDCardInfo_Store, 
            T.MembershipId AS IDCardInfo_MembershipId, 
            True AS _from0
        FROM RMSModel.IDCardInfoes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSModel.IDCardInfoes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView27()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IDCardInfoes
        [RMSEntities.IDCardInfo](T1.IDCardInfo_FirstName, T1.IDCardInfo_LastName, T1.IDCardInfo_Address, T1.IDCardInfo_PhoneNumber, T1.IDCardInfo_CardId, T1.IDCardInfo_TotalSales, T1.IDCardInfo_Points, T1.IDCardInfo_EntrySalesAmount, T1.IDCardInfo_MaxSalesAmount, T1.IDCardInfo_PointRatePerDollar, T1.IDCardInfo_Discount, T1.IDCardInfo_QuickBooksPriceLevel, T1.IDCardInfo_Store, T1.IDCardInfo_PatientId, T1.IDCardInfo_Membership, T1.IDCardInfo_MembershipId)
    FROM (
        SELECT 
            T.FirstName AS IDCardInfo_FirstName, 
            T.LastName AS IDCardInfo_LastName, 
            T.Address AS IDCardInfo_Address, 
            T.PhoneNumber AS IDCardInfo_PhoneNumber, 
            T.CardId AS IDCardInfo_CardId, 
            T.TotalSales AS IDCardInfo_TotalSales, 
            CAST(T.Points AS [Edm.Int32]) AS IDCardInfo_Points, 
            T.EntrySalesAmount AS IDCardInfo_EntrySalesAmount, 
            T.MaxSalesAmount AS IDCardInfo_MaxSalesAmount, 
            T.PointRatePerDollar AS IDCardInfo_PointRatePerDollar, 
            T.Discount AS IDCardInfo_Discount, 
            T.QuickBooksPriceLevel AS IDCardInfo_QuickBooksPriceLevel, 
            T.Store AS IDCardInfo_Store, 
            T.PatientId AS IDCardInfo_PatientId, 
            T.Membership AS IDCardInfo_Membership, 
            T.MembershipId AS IDCardInfo_MembershipId, 
            True AS _from0
        FROM RMSEntitiesStoreContainer.IDCardInfo AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.PatientAvailableRewards.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView28()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PatientAvailableRewards
        [RMSEntities.Store.PatientAvailableRewards](T1.PatientAvailableRewards_Id, T1.PatientAvailableRewards_PatientId, T1.PatientAvailableRewards_Name, T1.PatientAvailableRewards_Points, T1.PatientAvailableRewards_RewardPoints, T1.PatientAvailableRewards_Description, T1.PatientAvailableRewards_Membership, T1.PatientAvailableRewards_PointRatePerDollar, T1.PatientAvailableRewards_Value, T1.PatientAvailableRewards_MembershipId, T1.PatientAvailableRewards_Status, T1.PatientAvailableRewards_StatusDate, T1.PatientAvailableRewards_RewardId, T1.PatientAvailableRewards_PatientRewardId, T1.PatientAvailableRewards_DaysToExpiration, T1.PatientAvailableRewards_StoreName, T1.PatientAvailableRewards_ItemNumber)
    FROM (
        SELECT 
            CAST(T.Id AS [Edm.Int64]) AS PatientAvailableRewards_Id, 
            T.PatientId AS PatientAvailableRewards_PatientId, 
            T.Name AS PatientAvailableRewards_Name, 
            T.Points AS PatientAvailableRewards_Points, 
            T.RewardPoints AS PatientAvailableRewards_RewardPoints, 
            T.Description AS PatientAvailableRewards_Description, 
            T.Membership AS PatientAvailableRewards_Membership, 
            T.PointRatePerDollar AS PatientAvailableRewards_PointRatePerDollar, 
            T.[Value] AS PatientAvailableRewards_Value, 
            T.MembershipId AS PatientAvailableRewards_MembershipId, 
            T.Status AS PatientAvailableRewards_Status, 
            T.StatusDate AS PatientAvailableRewards_StatusDate, 
            T.RewardId AS PatientAvailableRewards_RewardId, 
            T.PatientRewardId AS PatientAvailableRewards_PatientRewardId, 
            T.DaysToExpiration AS PatientAvailableRewards_DaysToExpiration, 
            T.StoreName AS PatientAvailableRewards_StoreName, 
            T.ItemNumber AS PatientAvailableRewards_ItemNumber, 
            True AS _from0
        FROM RMSModel.PatientAvailableRewards AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSModel.PatientAvailableRewards.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView29()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PatientAvailableRewards
        [RMSEntities.PatientAvailableReward](T1.PatientAvailableReward_Id, T1.PatientAvailableReward_PatientId, T1.PatientAvailableReward_Name, T1.PatientAvailableReward_Points, T1.PatientAvailableReward_RewardPoints, T1.PatientAvailableReward_Description, T1.PatientAvailableReward_Membership, T1.PatientAvailableReward_PointRatePerDollar, T1.PatientAvailableReward_Value, T1.PatientAvailableReward_MembershipId, T1.PatientAvailableReward_Status, T1.PatientAvailableReward_StatusDate, T1.PatientAvailableReward_RewardId, T1.PatientAvailableReward_PatientRewardId, T1.PatientAvailableReward_DaysToExpiration, T1.PatientAvailableReward_StoreName, T1.PatientAvailableReward_ItemNumber)
    FROM (
        SELECT 
            CAST(T.Id AS [Edm.Int32]) AS PatientAvailableReward_Id, 
            T.PatientId AS PatientAvailableReward_PatientId, 
            T.Name AS PatientAvailableReward_Name, 
            T.Points AS PatientAvailableReward_Points, 
            T.RewardPoints AS PatientAvailableReward_RewardPoints, 
            T.Description AS PatientAvailableReward_Description, 
            T.Membership AS PatientAvailableReward_Membership, 
            T.PointRatePerDollar AS PatientAvailableReward_PointRatePerDollar, 
            T.[Value] AS PatientAvailableReward_Value, 
            T.MembershipId AS PatientAvailableReward_MembershipId, 
            T.Status AS PatientAvailableReward_Status, 
            T.StatusDate AS PatientAvailableReward_StatusDate, 
            T.RewardId AS PatientAvailableReward_RewardId, 
            T.PatientRewardId AS PatientAvailableReward_PatientRewardId, 
            T.DaysToExpiration AS PatientAvailableReward_DaysToExpiration, 
            T.StoreName AS PatientAvailableReward_StoreName, 
            T.ItemNumber AS PatientAvailableReward_ItemNumber, 
            True AS _from0
        FROM RMSEntitiesStoreContainer.PatientAvailableRewards AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.PatientRewardSale.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView30()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PatientRewardSale
        [RMSEntities.Store.PatientRewardSale](T1.PatientRewardSale_Id, T1.PatientRewardSale_TrackingNumber, T1.PatientRewardSale_SalesDate, T1.PatientRewardSale_SalesReceptNumber)
    FROM (
        SELECT 
            T.Id AS PatientRewardSale_Id, 
            T.TrackingNumber AS PatientRewardSale_TrackingNumber, 
            T.SalesDate AS PatientRewardSale_SalesDate, 
            T.SalesReceptNumber AS PatientRewardSale_SalesReceptNumber, 
            True AS _from0
        FROM RMSModel.PatientRewardSales AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSModel.PatientRewardSales.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView31()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PatientRewardSales
        [RMSEntities.PatientRewardSale](T1.PatientRewardSale_Id, T1.PatientRewardSale_SalesDate, T1.PatientRewardSale_TrackingNumber, T1.PatientRewardSale_SalesReceptNumber)
    FROM (
        SELECT 
            T.Id AS PatientRewardSale_Id, 
            T.SalesDate AS PatientRewardSale_SalesDate, 
            T.TrackingNumber AS PatientRewardSale_TrackingNumber, 
            T.SalesReceptNumber AS PatientRewardSale_SalesReceptNumber, 
            True AS _from0
        FROM RMSEntitiesStoreContainer.PatientRewardSale AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.Stores.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView32()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Stores
        [RMSEntities.Store.Stores](T1.Stores_StoreId, T1.Stores_StoreCode, T1.Stores_StoreAddress, T1.Stores_CompanyId, T1.Stores_TransactionSeed, T1.Stores_SeedTransaction, T1.Stores_EntryTimeStamp)
    FROM (
        SELECT 
            T.StoreId AS Stores_StoreId, 
            T.StoreCode AS Stores_StoreCode, 
            T.StoreAddress AS Stores_StoreAddress, 
            T.CompanyId AS Stores_CompanyId, 
            T.TransactionSeed AS Stores_TransactionSeed, 
            T.SeedTransaction AS Stores_SeedTransaction, 
            T.EntryTimeStamp AS Stores_EntryTimeStamp, 
            True AS _from0
        FROM RMSModel.Stores AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSModel.Stores.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView33()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Stores
        [RMSEntities.Store](T1.Store_StoreId, T1.Store_StoreCode, T1.Store_StoreAddress, T1.Store_CompanyId, T1.Store_TransactionSeed, T1.Store_SeedTransaction, T1.Store_EntryTimeStamp)
    FROM (
        SELECT 
            T.StoreId AS Store_StoreId, 
            T.StoreCode AS Store_StoreCode, 
            T.StoreAddress AS Store_StoreAddress, 
            T.CompanyId AS Store_CompanyId, 
            T.TransactionSeed AS Store_TransactionSeed, 
            T.SeedTransaction AS Store_SeedTransaction, 
            T.EntryTimeStamp AS Store_EntryTimeStamp, 
            True AS _from0
        FROM RMSEntitiesStoreContainer.Stores AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.MembershipTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView34()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MembershipTypes
        [RMSEntities.Store.MembershipTypes](T1.MembershipTypes_Id, T1.MembershipTypes_Name, T1.MembershipTypes_EntrySalesAmount, T1.MembershipTypes_MaxSalesAmount, T1.MembershipTypes_PointRatePerDollar, T1.MembershipTypes_QuickBooksPriceLevel, T1.MembershipTypes_Discount, T1.MembershipTypes_EntryAge, T1.MembershipTypes_MaxAge)
    FROM (
        SELECT 
            T.Id AS MembershipTypes_Id, 
            T.Name AS MembershipTypes_Name, 
            T.EntrySalesAmount AS MembershipTypes_EntrySalesAmount, 
            T.MaxSalesAmount AS MembershipTypes_MaxSalesAmount, 
            T.PointRatePerDollar AS MembershipTypes_PointRatePerDollar, 
            T.QuickBooksPriceLevel AS MembershipTypes_QuickBooksPriceLevel, 
            T.Discount AS MembershipTypes_Discount, 
            T.EntryAge AS MembershipTypes_EntryAge, 
            T.MaxAge AS MembershipTypes_MaxAge, 
            True AS _from0
        FROM RMSModel.MembershipTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSModel.MembershipTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView35()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MembershipTypes
        [RMSEntities.MembershipType](T1.MembershipType_Id, T1.MembershipType_Name, T1.MembershipType_EntrySalesAmount, T1.MembershipType_MaxSalesAmount, T1.MembershipType_PointRatePerDollar, T1.MembershipType_QuickBooksPriceLevel, T1.MembershipType_Discount, T1.MembershipType_EntryAge, T1.MembershipType_MaxAge)
    FROM (
        SELECT 
            T.Id AS MembershipType_Id, 
            T.Name AS MembershipType_Name, 
            T.EntrySalesAmount AS MembershipType_EntrySalesAmount, 
            T.MaxSalesAmount AS MembershipType_MaxSalesAmount, 
            T.PointRatePerDollar AS MembershipType_PointRatePerDollar, 
            T.QuickBooksPriceLevel AS MembershipType_QuickBooksPriceLevel, 
            T.Discount AS MembershipType_Discount, 
            T.EntryAge AS MembershipType_EntryAge, 
            T.MaxAge AS MembershipType_MaxAge, 
            True AS _from0
        FROM RMSEntitiesStoreContainer.MembershipTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSEntitiesStoreContainer.PatientMembership.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView36()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PatientMembership
        [RMSEntities.Store.PatientMembership](T1.PatientMembership_PatientId, T1.PatientMembership_Points, T1.PatientMembership_Membership, T1.PatientMembership_MembershipId, T1.PatientMembership_Age)
    FROM (
        SELECT 
            T.PatientId AS PatientMembership_PatientId, 
            T.Points AS PatientMembership_Points, 
            T.Membership AS PatientMembership_Membership, 
            T.MembershipId AS PatientMembership_MembershipId, 
            T.Age AS PatientMembership_Age, 
            True AS _from0
        FROM RMSModel.PatientMemberships AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RMSModel.PatientMemberships.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView37()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PatientMemberships
        [RMSEntities.PatientMembership](T1.PatientMembership_PatientId, T1.PatientMembership_Points, T1.PatientMembership_Membership, T1.PatientMembership_MembershipId, T1.PatientMembership_Age)
    FROM (
        SELECT 
            T.PatientId AS PatientMembership_PatientId, 
            T.Points AS PatientMembership_Points, 
            T.Membership AS PatientMembership_Membership, 
            T.MembershipId AS PatientMembership_MembershipId, 
            T.Age AS PatientMembership_Age, 
            True AS _from0
        FROM RMSEntitiesStoreContainer.PatientMembership AS T
    ) AS T1");
        }
    }
}
