//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RMSDataAccessLayer
{
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel;
    using TrackableEntities;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Runtime.Serialization;
    using System.Collections.ObjectModel;

    using System;
    using System.Collections.Generic;
    using TrackableEntities.Client;
    
    public partial class MembershipType : BaseEntity<MembershipType>
    {
        
        public MembershipType()
        {
            this.PatientMemberships = new ObservableCollection<PatientMembership>();
            CustomStartup();
            CustomStartup2();
            this.PropertyChanged += UpdatePropertyChanged;
            
        }
        partial void CustomStartup();
        partial void CustomStartup2();
    
            private void UpdatePropertyChanged(object sender, PropertyChangedEventArgs e)
            {
                if (!string.IsNullOrEmpty(e.PropertyName) && (!Environment.StackTrace.Contains("Internal.Materialization")) && TrackingState == TrackingState.Unchanged)
                {
                    TrackingState = TrackingState.Modified;
                }
            }
    
            
            ChangeTrackingCollection<MembershipType> _changeTracker;
            [NotMapped]
            [IgnoreDataMember]
            public ChangeTrackingCollection<MembershipType> ChangeTracker
            {
                get
                {
                    return _changeTracker;
                }
            }
            
            public new void StartTracking()
            {
                _changeTracker = new ChangeTrackingCollection<MembershipType>(this);
            }
        [DataMember]
                    [Required(ErrorMessage="Id is required")]
    	public int Id
    	{ 
    		get { return _Id; }
    		set
    		{
    			if (Equals(value, _Id)) return;
    			_Id = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private int _Id;
        [DataMember]
                    [Required(ErrorMessage="Name is required")]
                [StringLength(50)]
    	public string Name
    	{ 
    		get { return _Name; }
    		set
    		{
    			if (Equals(value, _Name)) return;
    			_Name = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Name;
        [DataMember]
                    [Required(ErrorMessage="EntrySalesAmount is required")]
    	public double EntrySalesAmount
    	{ 
    		get { return _EntrySalesAmount; }
    		set
    		{
    			if (Equals(value, _EntrySalesAmount)) return;
    			_EntrySalesAmount = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private double _EntrySalesAmount;
        [DataMember]
                    [Required(ErrorMessage="MaxSalesAmount is required")]
    	public double MaxSalesAmount
    	{ 
    		get { return _MaxSalesAmount; }
    		set
    		{
    			if (Equals(value, _MaxSalesAmount)) return;
    			_MaxSalesAmount = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private double _MaxSalesAmount;
        [DataMember]
                    [Required(ErrorMessage="PointRatePerDollar is required")]
    	public double PointRatePerDollar
    	{ 
    		get { return _PointRatePerDollar; }
    		set
    		{
    			if (Equals(value, _PointRatePerDollar)) return;
    			_PointRatePerDollar = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private double _PointRatePerDollar;
        [DataMember]
                    [Required(ErrorMessage="QuickBooksPriceLevel is required")]
                [StringLength(50)]
    	public string QuickBooksPriceLevel
    	{ 
    		get { return _QuickBooksPriceLevel; }
    		set
    		{
    			if (Equals(value, _QuickBooksPriceLevel)) return;
    			_QuickBooksPriceLevel = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _QuickBooksPriceLevel;
        [DataMember]
                    [Required(ErrorMessage="Discount is required")]
    	public double Discount
    	{ 
    		get { return _Discount; }
    		set
    		{
    			if (Equals(value, _Discount)) return;
    			_Discount = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private double _Discount;
        [DataMember]
        	public Nullable<int> EntryAge
    	{ 
    		get { return _EntryAge; }
    		set
    		{
    			if (Equals(value, _EntryAge)) return;
    			_EntryAge = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<int> _EntryAge;
        [DataMember]
        	public Nullable<int> MaxAge
    	{ 
    		get { return _MaxAge; }
    		set
    		{
    			if (Equals(value, _MaxAge)) return;
    			_MaxAge = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<int> _MaxAge;
        [DataMember]
    	public ObservableCollection<PatientMembership> PatientMemberships
    	{
    		get { return _PatientMemberships; }
    		set
    		{
    			if (Equals(value, _PatientMemberships)) return;
    			_PatientMemberships = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private ObservableCollection<PatientMembership> _PatientMemberships;
    }
}
