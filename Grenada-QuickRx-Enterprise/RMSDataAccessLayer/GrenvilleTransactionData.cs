//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RMSDataAccessLayer
{
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel;
    using TrackableEntities;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Runtime.Serialization;
    using System.Collections.ObjectModel;

    using System;
    using System.Collections.Generic;
    using TrackableEntities.Client;
    
    public partial class GrenvilleTransactionData : BaseEntity<GrenvilleTransactionData>
    {
        [DataMember]
                    [Required(ErrorMessage="StationId is required")]
    	public int StationId
    	{ 
    		get { return _StationId; }
    		set
    		{
    			if (Equals(value, _StationId)) return;
    			_StationId = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private int _StationId;
        [DataMember]
                    [Required(ErrorMessage="BatchId is required")]
    	public int BatchId
    	{ 
    		get { return _BatchId; }
    		set
    		{
    			if (Equals(value, _BatchId)) return;
    			_BatchId = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private int _BatchId;
        [DataMember]
        	public Nullable<int> CloseBatchId
    	{ 
    		get { return _CloseBatchId; }
    		set
    		{
    			if (Equals(value, _CloseBatchId)) return;
    			_CloseBatchId = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<int> _CloseBatchId;
        [DataMember]
                    [Required(ErrorMessage="Time is required")]
    	public System.DateTime Time
    	{ 
    		get { return _Time; }
    		set
    		{
    			if (Equals(value, _Time)) return;
    			_Time = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private System.DateTime _Time;
        [DataMember]
        	public Nullable<int> CustomerId
    	{ 
    		get { return _CustomerId; }
    		set
    		{
    			if (Equals(value, _CustomerId)) return;
    			_CustomerId = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<int> _CustomerId;
        [DataMember]
        	public Nullable<int> PharmacistId
    	{ 
    		get { return _PharmacistId; }
    		set
    		{
    			if (Equals(value, _PharmacistId)) return;
    			_PharmacistId = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<int> _PharmacistId;
        [DataMember]
                    [Required(ErrorMessage="CashierId is required")]
    	public int CashierId
    	{ 
    		get { return _CashierId; }
    		set
    		{
    			if (Equals(value, _CashierId)) return;
    			_CashierId = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private int _CashierId;
        [DataMember]
                    [StringLength(255)]
    	public string Comment
    	{ 
    		get { return _Comment; }
    		set
    		{
    			if (Equals(value, _Comment)) return;
    			_Comment = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Comment;
        [DataMember]
                    [StringLength(50)]
    	public string ReferenceNumber
    	{ 
    		get { return _ReferenceNumber; }
    		set
    		{
    			if (Equals(value, _ReferenceNumber)) return;
    			_ReferenceNumber = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _ReferenceNumber;
        [DataMember]
                    [StringLength(30)]
    	public string StoreCode
    	{ 
    		get { return _StoreCode; }
    		set
    		{
    			if (Equals(value, _StoreCode)) return;
    			_StoreCode = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _StoreCode;
        [DataMember]
                    [Required(ErrorMessage="TransactionId is required")]
    	public int TransactionId
    	{ 
    		get { return _TransactionId; }
    		set
    		{
    			if (Equals(value, _TransactionId)) return;
    			_TransactionId = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private int _TransactionId;
        [DataMember]
                    [Required(ErrorMessage="OpenClose is required")]
    	public bool OpenClose
    	{ 
    		get { return _OpenClose; }
    		set
    		{
    			if (Equals(value, _OpenClose)) return;
    			_OpenClose = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private bool _OpenClose;
        [DataMember]
                    [StringLength(50)]
    	public string Status
    	{ 
    		get { return _Status; }
    		set
    		{
    			if (Equals(value, _Status)) return;
    			_Status = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Status;
        [DataMember]
        	public byte[] EntryTimeStamp
    	{ 
    		get { return _EntryTimeStamp; }
    		set
    		{
    			if (Equals(value, _EntryTimeStamp)) return;
    			_EntryTimeStamp = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private byte[] _EntryTimeStamp;
        [DataMember]
        	public Nullable<int> ParentTransactionId
    	{ 
    		get { return _ParentTransactionId; }
    		set
    		{
    			if (Equals(value, _ParentTransactionId)) return;
    			_ParentTransactionId = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<int> _ParentTransactionId;
        [DataMember]
                    [StringLength(50)]
    	public string DeliveryType
    	{ 
    		get { return _DeliveryType; }
    		set
    		{
    			if (Equals(value, _DeliveryType)) return;
    			_DeliveryType = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _DeliveryType;
        [DataMember]
        	public Nullable<double> Longitude
    	{ 
    		get { return _Longitude; }
    		set
    		{
    			if (Equals(value, _Longitude)) return;
    			_Longitude = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<double> _Longitude;
        [DataMember]
        	public Nullable<double> Latitude
    	{ 
    		get { return _Latitude; }
    		set
    		{
    			if (Equals(value, _Latitude)) return;
    			_Latitude = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<double> _Latitude;
        [DataMember]
                    [Required(ErrorMessage="StoreID is required")]
    	public int StoreID
    	{ 
    		get { return _StoreID; }
    		set
    		{
    			if (Equals(value, _StoreID)) return;
    			_StoreID = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private int _StoreID;
        [DataMember]
                    [Required(ErrorMessage="TransactionEntryId is required")]
    	public int TransactionEntryId
    	{ 
    		get { return _TransactionEntryId; }
    		set
    		{
    			if (Equals(value, _TransactionEntryId)) return;
    			_TransactionEntryId = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private int _TransactionEntryId;
        [DataMember]
                    [Required(ErrorMessage="Price is required")]
    	public double Price
    	{ 
    		get { return _Price; }
    		set
    		{
    			if (Equals(value, _Price)) return;
    			_Price = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private double _Price;
        [DataMember]
                    [Required(ErrorMessage="Quantity is required")]
    	public double Quantity
    	{ 
    		get { return _Quantity; }
    		set
    		{
    			if (Equals(value, _Quantity)) return;
    			_Quantity = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private double _Quantity;
        [DataMember]
                    [Required(ErrorMessage="Taxable is required")]
    	public bool Taxable
    	{ 
    		get { return _Taxable; }
    		set
    		{
    			if (Equals(value, _Taxable)) return;
    			_Taxable = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private bool _Taxable;
        [DataMember]
                    [StringLength(255)]
    	public string Expr1
    	{ 
    		get { return _Expr1; }
    		set
    		{
    			if (Equals(value, _Expr1)) return;
    			_Expr1 = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Expr1;
        [DataMember]
        	public Nullable<System.DateTime> TransactionTime
    	{ 
    		get { return _TransactionTime; }
    		set
    		{
    			if (Equals(value, _TransactionTime)) return;
    			_TransactionTime = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<System.DateTime> _TransactionTime;
        [DataMember]
                    [Required(ErrorMessage="SalesTaxPercent is required")]
    	public double SalesTaxPercent
    	{ 
    		get { return _SalesTaxPercent; }
    		set
    		{
    			if (Equals(value, _SalesTaxPercent)) return;
    			_SalesTaxPercent = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private double _SalesTaxPercent;
        [DataMember]
        	public Nullable<double> Discount
    	{ 
    		get { return _Discount; }
    		set
    		{
    			if (Equals(value, _Discount)) return;
    			_Discount = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<double> _Discount;
        [DataMember]
        	public Nullable<short> EntryNumber
    	{ 
    		get { return _EntryNumber; }
    		set
    		{
    			if (Equals(value, _EntryNumber)) return;
    			_EntryNumber = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<short> _EntryNumber;
        [DataMember]
        	public string Dosage
    	{ 
    		get { return _Dosage; }
    		set
    		{
    			if (Equals(value, _Dosage)) return;
    			_Dosage = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Dosage;
        [DataMember]
        	public Nullable<System.DateTime> ExpiryDate
    	{ 
    		get { return _ExpiryDate; }
    		set
    		{
    			if (Equals(value, _ExpiryDate)) return;
    			_ExpiryDate = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<System.DateTime> _ExpiryDate;
        [DataMember]
        	public Nullable<int> Repeat
    	{ 
    		get { return _Repeat; }
    		set
    		{
    			if (Equals(value, _Repeat)) return;
    			_Repeat = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<int> _Repeat;
        [DataMember]
        	public Nullable<int> RepeatQuantity
    	{ 
    		get { return _RepeatQuantity; }
    		set
    		{
    			if (Equals(value, _RepeatQuantity)) return;
    			_RepeatQuantity = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<int> _RepeatQuantity;
        [DataMember]
                    [StringLength(50)]
    	public string QBItemListID
    	{ 
    		get { return _QBItemListID; }
    		set
    		{
    			if (Equals(value, _QBItemListID)) return;
    			_QBItemListID = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _QBItemListID;
        [DataMember]
                    [StringLength(50)]
    	public string ItemNumber
    	{ 
    		get { return _ItemNumber; }
    		set
    		{
    			if (Equals(value, _ItemNumber)) return;
    			_ItemNumber = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _ItemNumber;
        [DataMember]
                    [StringLength(50)]
    	public string ItemName
    	{ 
    		get { return _ItemName; }
    		set
    		{
    			if (Equals(value, _ItemName)) return;
    			_ItemName = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _ItemName;
        [DataMember]
        	public Nullable<int> ItemId
    	{ 
    		get { return _ItemId; }
    		set
    		{
    			if (Equals(value, _ItemId)) return;
    			_ItemId = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<int> _ItemId;
        [DataMember]
        	public Nullable<bool> IsActive
    	{ 
    		get { return _IsActive; }
    		set
    		{
    			if (Equals(value, _IsActive)) return;
    			_IsActive = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<bool> _IsActive;
        [DataMember]
                    [StringLength(3)]
    	public string Initials
    	{ 
    		get { return _Initials; }
    		set
    		{
    			if (Equals(value, _Initials)) return;
    			_Initials = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Initials;
        [DataMember]
                    [StringLength(50)]
    	public string Role
    	{ 
    		get { return _Role; }
    		set
    		{
    			if (Equals(value, _Role)) return;
    			_Role = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Role;
        [DataMember]
        	public string LoginName
    	{ 
    		get { return _LoginName; }
    		set
    		{
    			if (Equals(value, _LoginName)) return;
    			_LoginName = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _LoginName;
        [DataMember]
                    [StringLength(255)]
    	public string TransactionEntryComment
    	{ 
    		get { return _TransactionEntryComment; }
    		set
    		{
    			if (Equals(value, _TransactionEntryComment)) return;
    			_TransactionEntryComment = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _TransactionEntryComment;
        [DataMember]
                    [StringLength(50)]
    	public string CashierFirstName
    	{ 
    		get { return _CashierFirstName; }
    		set
    		{
    			if (Equals(value, _CashierFirstName)) return;
    			_CashierFirstName = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _CashierFirstName;
        [DataMember]
                    [StringLength(50)]
    	public string CashierLastName
    	{ 
    		get { return _CashierLastName; }
    		set
    		{
    			if (Equals(value, _CashierLastName)) return;
    			_CashierLastName = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _CashierLastName;
        [DataMember]
        	public Nullable<int> DoctorId
    	{ 
    		get { return _DoctorId; }
    		set
    		{
    			if (Equals(value, _DoctorId)) return;
    			_DoctorId = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<int> _DoctorId;
        [DataMember]
        	public Nullable<int> PatientId
    	{ 
    		get { return _PatientId; }
    		set
    		{
    			if (Equals(value, _PatientId)) return;
    			_PatientId = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<int> _PatientId;
        [DataMember]
                    [StringLength(50)]
    	public string PharmacistFirstName
    	{ 
    		get { return _PharmacistFirstName; }
    		set
    		{
    			if (Equals(value, _PharmacistFirstName)) return;
    			_PharmacistFirstName = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _PharmacistFirstName;
        [DataMember]
                    [StringLength(50)]
    	public string PharmacistLastName
    	{ 
    		get { return _PharmacistLastName; }
    		set
    		{
    			if (Equals(value, _PharmacistLastName)) return;
    			_PharmacistLastName = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _PharmacistLastName;
        [DataMember]
                    [StringLength(1000)]
    	public string Description
    	{ 
    		get { return _Description; }
    		set
    		{
    			if (Equals(value, _Description)) return;
    			_Description = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Description;
        [DataMember]
        	public Nullable<bool> isExtension
    	{ 
    		get { return _isExtension; }
    		set
    		{
    			if (Equals(value, _isExtension)) return;
    			_isExtension = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<bool> _isExtension;
        [DataMember]
                    [StringLength(50)]
    	public string CardId
    	{ 
    		get { return _CardId; }
    		set
    		{
    			if (Equals(value, _CardId)) return;
    			_CardId = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _CardId;
        [DataMember]
                    [StringLength(50)]
    	public string PatientFirstName
    	{ 
    		get { return _PatientFirstName; }
    		set
    		{
    			if (Equals(value, _PatientFirstName)) return;
    			_PatientFirstName = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _PatientFirstName;
        [DataMember]
                    [StringLength(50)]
    	public string PatientLastName
    	{ 
    		get { return _PatientLastName; }
    		set
    		{
    			if (Equals(value, _PatientLastName)) return;
    			_PatientLastName = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _PatientLastName;
        [DataMember]
                    [StringLength(50)]
    	public string DoctorFirstName
    	{ 
    		get { return _DoctorFirstName; }
    		set
    		{
    			if (Equals(value, _DoctorFirstName)) return;
    			_DoctorFirstName = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _DoctorFirstName;
        [DataMember]
                    [StringLength(50)]
    	public string DoctorLastName
    	{ 
    		get { return _DoctorLastName; }
    		set
    		{
    			if (Equals(value, _DoctorLastName)) return;
    			_DoctorLastName = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _DoctorLastName;
        [DataMember]
                    [StringLength(50)]
    	public string PatientPhoneNumber
    	{ 
    		get { return _PatientPhoneNumber; }
    		set
    		{
    			if (Equals(value, _PatientPhoneNumber)) return;
    			_PatientPhoneNumber = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _PatientPhoneNumber;
    }
}
