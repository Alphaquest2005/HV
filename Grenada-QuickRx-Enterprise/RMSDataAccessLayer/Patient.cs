//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RMSDataAccessLayer
{
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel;
    using TrackableEntities;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Runtime.Serialization;
    using System.Collections.ObjectModel;

    using System;
    using System.Collections.Generic;
    using TrackableEntities.Client;
    
    public partial class Patient : Person
    {
        
        public Patient()
        {
            this.TotalSales = 0D;
            this.StartingSales = 0D;
            this.Prescription = new ObservableCollection<Prescription>();
            this.QuickPrescription = new ObservableCollection<QuickPrescription>();
            this.PatientRewards = new ObservableCollection<PatientReward>();
            this.AvailableRewards = new ObservableCollection<PatientAvailableReward>();
            CustomStartup();
            CustomStartup2();
            this.PropertyChanged += UpdatePropertyChanged;
            
        }
        partial void CustomStartup();
        partial void CustomStartup2();
    
            private void UpdatePropertyChanged(object sender, PropertyChangedEventArgs e)
            {
                if (!string.IsNullOrEmpty(e.PropertyName) && (!Environment.StackTrace.Contains("Internal.Materialization")) && TrackingState == TrackingState.Unchanged)
                {
                    TrackingState = TrackingState.Modified;
                }
            }
    
            
        [DataMember]
        	public string Allergies
    	{ 
    		get { return _Allergies; }
    		set
    		{
    			if (Equals(value, _Allergies)) return;
    			_Allergies = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Allergies;
        [DataMember]
        	public string Guardian
    	{ 
    		get { return _Guardian; }
    		set
    		{
    			if (Equals(value, _Guardian)) return;
    			_Guardian = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Guardian;
        [DataMember]
        	public Nullable<double> Discount
    	{ 
    		get { return _Discount; }
    		set
    		{
    			if (Equals(value, _Discount)) return;
    			_Discount = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<double> _Discount;
        [DataMember]
        	public Nullable<double> TotalSales
    	{ 
    		get { return _TotalSales; }
    		set
    		{
    			if (Equals(value, _TotalSales)) return;
    			_TotalSales = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<double> _TotalSales;
        [DataMember]
        	public Nullable<double> StartingSales
    	{ 
    		get { return _StartingSales; }
    		set
    		{
    			if (Equals(value, _StartingSales)) return;
    			_StartingSales = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<double> _StartingSales;
        [DataMember]
    	public ObservableCollection<Prescription> Prescription
    	{
    		get { return _Prescription; }
    		set
    		{
    			if (Equals(value, _Prescription)) return;
    			_Prescription = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private ObservableCollection<Prescription> _Prescription;
        [DataMember]
    	public ObservableCollection<QuickPrescription> QuickPrescription
    	{
    		get { return _QuickPrescription; }
    		set
    		{
    			if (Equals(value, _QuickPrescription)) return;
    			_QuickPrescription = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private ObservableCollection<QuickPrescription> _QuickPrescription;
        [DataMember]
    	public QBCustomer QBCustomer
    	{
    		get { return _QBCustomer; }
    		set
    		{
    			if (Equals(value, _QBCustomer)) return;
    			_QBCustomer = value;
    			QBCustomerChangeTracker = _QBCustomer == null ? null
    				: new ChangeTrackingCollection<QBCustomer> { _QBCustomer };
    			NotifyPropertyChanged();
    		}
    	}
    	private QBCustomer _QBCustomer;
    	private ChangeTrackingCollection<QBCustomer> QBCustomerChangeTracker { get; set; }
        [DataMember]
    	public Photo Photo
    	{
    		get { return _Photo; }
    		set
    		{
    			if (Equals(value, _Photo)) return;
    			_Photo = value;
    			PhotoChangeTracker = _Photo == null ? null
    				: new ChangeTrackingCollection<Photo> { _Photo };
    			NotifyPropertyChanged();
    		}
    	}
    	private Photo _Photo;
    	private ChangeTrackingCollection<Photo> PhotoChangeTracker { get; set; }
        [DataMember]
    	public ObservableCollection<PatientReward> PatientRewards
    	{
    		get { return _PatientRewards; }
    		set
    		{
    			if (Equals(value, _PatientRewards)) return;
    			_PatientRewards = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private ObservableCollection<PatientReward> _PatientRewards;
        [DataMember]
    	public ObservableCollection<PatientAvailableReward> AvailableRewards
    	{
    		get { return _AvailableRewards; }
    		set
    		{
    			if (Equals(value, _AvailableRewards)) return;
    			_AvailableRewards = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private ObservableCollection<PatientAvailableReward> _AvailableRewards;
        [DataMember]
    	public PatientMembership Membership
    	{
    		get { return _Membership; }
    		set
    		{
    			if (Equals(value, _Membership)) return;
    			_Membership = value;
    			MembershipChangeTracker = _Membership == null ? null
    				: new ChangeTrackingCollection<PatientMembership> { _Membership };
    			NotifyPropertyChanged();
    		}
    	}
    	private PatientMembership _Membership;
    	private ChangeTrackingCollection<PatientMembership> MembershipChangeTracker { get; set; }
    }
}
