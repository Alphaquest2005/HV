//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RMSDataAccessLayer
{
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel;
    using TrackableEntities;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Runtime.Serialization;
    using System.Collections.ObjectModel;

    using System;
    using System.Collections.Generic;
    using TrackableEntities.Client;
    
    public partial class QBCustomer : BaseEntity<QBCustomer>
    {
        [DataMember]
                    [Required(ErrorMessage="Id is required")]
    	public int Id
    	{ 
    		get { return _Id; }
    		set
    		{
    			if (Equals(value, _Id)) return;
    			_Id = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private int _Id;
        [DataMember]
                    [Required(ErrorMessage="CustomerListID is required")]
                [StringLength(50)]
    	public string CustomerListID
    	{ 
    		get { return _CustomerListID; }
    		set
    		{
    			if (Equals(value, _CustomerListID)) return;
    			_CustomerListID = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _CustomerListID;
        [DataMember]
        	public Nullable<double> CustomerDiscPercent
    	{ 
    		get { return _CustomerDiscPercent; }
    		set
    		{
    			if (Equals(value, _CustomerDiscPercent)) return;
    			_CustomerDiscPercent = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<double> _CustomerDiscPercent;
        [DataMember]
                    [StringLength(50)]
    	public string CustomerDiscType
    	{ 
    		get { return _CustomerDiscType; }
    		set
    		{
    			if (Equals(value, _CustomerDiscType)) return;
    			_CustomerDiscType = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _CustomerDiscType;
        [DataMember]
        	public Nullable<int> PriceLevelNumber
    	{ 
    		get { return _PriceLevelNumber; }
    		set
    		{
    			if (Equals(value, _PriceLevelNumber)) return;
    			_PriceLevelNumber = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<int> _PriceLevelNumber;
        [DataMember]
        	public Nullable<bool> IsRewardsMember
    	{ 
    		get { return _IsRewardsMember; }
    		set
    		{
    			if (Equals(value, _IsRewardsMember)) return;
    			_IsRewardsMember = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<bool> _IsRewardsMember;
        [DataMember]
                    [StringLength(50)]
    	public string LastSale
    	{ 
    		get { return _LastSale; }
    		set
    		{
    			if (Equals(value, _LastSale)) return;
    			_LastSale = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _LastSale;
        [DataMember]
        	public Nullable<double> RewardAmount
    	{ 
    		get { return _RewardAmount; }
    		set
    		{
    			if (Equals(value, _RewardAmount)) return;
    			_RewardAmount = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<double> _RewardAmount;
        [DataMember]
        	public Nullable<double> RewardPercent
    	{ 
    		get { return _RewardPercent; }
    		set
    		{
    			if (Equals(value, _RewardPercent)) return;
    			_RewardPercent = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<double> _RewardPercent;
        [DataMember]
        	public Nullable<System.DateTime> EarnedDate
    	{ 
    		get { return _EarnedDate; }
    		set
    		{
    			if (Equals(value, _EarnedDate)) return;
    			_EarnedDate = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<System.DateTime> _EarnedDate;
        [DataMember]
        	public Nullable<System.DateTime> ExpirationDate
    	{ 
    		get { return _ExpirationDate; }
    		set
    		{
    			if (Equals(value, _ExpirationDate)) return;
    			_ExpirationDate = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<System.DateTime> _ExpirationDate;
        [DataMember]
                    [Required(ErrorMessage="Source is required")]
                [StringLength(50)]
    	public string Source
    	{ 
    		get { return _Source; }
    		set
    		{
    			if (Equals(value, _Source)) return;
    			_Source = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _Source;
        [DataMember]
                    [StringLength(50)]
    	public string CustomerId
    	{ 
    		get { return _CustomerId; }
    		set
    		{
    			if (Equals(value, _CustomerId)) return;
    			_CustomerId = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private string _CustomerId;
        [DataMember]
    	public Patient Persons_Patient
    	{
    		get { return _Persons_Patient; }
    		set
    		{
    			if (Equals(value, _Persons_Patient)) return;
    			_Persons_Patient = value;
    			Persons_PatientChangeTracker = _Persons_Patient == null ? null
    				: new ChangeTrackingCollection<Patient> { _Persons_Patient };
    			NotifyPropertyChanged();
    		}
    	}
    	private Patient _Persons_Patient;
    	private ChangeTrackingCollection<Patient> Persons_PatientChangeTracker { get; set; }
    }
}
