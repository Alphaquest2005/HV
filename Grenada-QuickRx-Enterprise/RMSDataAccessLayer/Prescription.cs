//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RMSDataAccessLayer
{
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel;
    using TrackableEntities;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Runtime.Serialization;
    using System.Collections.ObjectModel;

    using System;
    using System.Collections.Generic;
    using TrackableEntities.Client;
    
    public partial class Prescription : TransactionBase
    {
        
        public Prescription()
        {
            this.Prescriptions = new ObservableCollection<Prescription>();
            CustomStartup();
            CustomStartup2();
            this.PropertyChanged += UpdatePropertyChanged;
            
        }
        partial void CustomStartup();
        partial void CustomStartup2();
    
            private void UpdatePropertyChanged(object sender, PropertyChangedEventArgs e)
            {
                if (!string.IsNullOrEmpty(e.PropertyName) && (!Environment.StackTrace.Contains("Internal.Materialization")) && TrackingState == TrackingState.Unchanged)
                {
                    TrackingState = TrackingState.Modified;
                }
            }
    
            
        [DataMember]
                    [Required(ErrorMessage="DoctorId is required")]
    	public int DoctorId
    	{ 
    		get { return _DoctorId; }
    		set
    		{
    			if (Equals(value, _DoctorId)) return;
    			_DoctorId = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private int _DoctorId;
        [DataMember]
                    [Required(ErrorMessage="PatientId is required")]
    	public int PatientId
    	{ 
    		get { return _PatientId; }
    		set
    		{
    			if (Equals(value, _PatientId)) return;
    			_PatientId = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private int _PatientId;
        [DataMember]
        	public Nullable<int> ParentPrescriptionId
    	{ 
    		get { return _ParentPrescriptionId; }
    		set
    		{
    			if (Equals(value, _ParentPrescriptionId)) return;
    			_ParentPrescriptionId = value;
                ValidateModelProperty(this, value);
    			NotifyPropertyChanged();
    		}
    	}
    	private Nullable<int> _ParentPrescriptionId;
        [DataMember]
    	public Doctor Doctor
    	{
    		get { return _Doctor; }
    		set
    		{
    			if (Equals(value, _Doctor)) return;
    			_Doctor = value;
    			DoctorChangeTracker = _Doctor == null ? null
    				: new ChangeTrackingCollection<Doctor> { _Doctor };
    			NotifyPropertyChanged();
    		}
    	}
    	private Doctor _Doctor;
    	private ChangeTrackingCollection<Doctor> DoctorChangeTracker { get; set; }
        [DataMember]
    	public Patient Patient
    	{
    		get { return _Patient; }
    		set
    		{
    			if (Equals(value, _Patient)) return;
    			_Patient = value;
    			PatientChangeTracker = _Patient == null ? null
    				: new ChangeTrackingCollection<Patient> { _Patient };
    			NotifyPropertyChanged();
    		}
    	}
    	private Patient _Patient;
    	private ChangeTrackingCollection<Patient> PatientChangeTracker { get; set; }
        [DataMember]
    	public SearchView SearchViews
    	{
    		get { return _SearchViews; }
    		set
    		{
    			if (Equals(value, _SearchViews)) return;
    			_SearchViews = value;
    			SearchViewsChangeTracker = _SearchViews == null ? null
    				: new ChangeTrackingCollection<SearchView> { _SearchViews };
    			NotifyPropertyChanged();
    		}
    	}
    	private SearchView _SearchViews;
    	private ChangeTrackingCollection<SearchView> SearchViewsChangeTracker { get; set; }
        [DataMember]
    	public ObservableCollection<Prescription> Prescriptions
    	{
    		get { return _Prescriptions; }
    		set
    		{
    			if (Equals(value, _Prescriptions)) return;
    			_Prescriptions = value;
    			NotifyPropertyChanged();
    		}
    	}
    	private ObservableCollection<Prescription> _Prescriptions;
        [DataMember]
    	public Prescription ParentPrescription
    	{
    		get { return _ParentPrescription; }
    		set
    		{
    			if (Equals(value, _ParentPrescription)) return;
    			_ParentPrescription = value;
    			ParentPrescriptionChangeTracker = _ParentPrescription == null ? null
    				: new ChangeTrackingCollection<Prescription> { _ParentPrescription };
    			NotifyPropertyChanged();
    		}
    	}
    	private Prescription _ParentPrescription;
    	private ChangeTrackingCollection<Prescription> ParentPrescriptionChangeTracker { get; set; }
    }
}
